// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-07-07 16:42:12.083616 +0530 IST m=+0.056490824

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/serviceRequest/{serviceRequestId}": {
            "get": {
                "description": "Get service request by service request id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get service request details by service request id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service Request Id",
                        "name": "serviceRequestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceRequestStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    }
                }
            }
        },
        "/serviceRequest/{workflowname}": {
            "post": {
                "description": "Create a service request and get service request id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a service request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow Name",
                        "name": "workflowname",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service Request Payload",
                        "name": "serviceRequestPayload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceRequestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    }
                }
            }
        },
        "/stepResponse": {
            "post": {
                "description": "Http Resume Service Request API for Async Step",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Http Resume Service Request API for Async Step",
                "parameters": [
                    {
                        "description": "Resume Service Request Payload",
                        "name": "ResumeServiceRequestPayload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AsyncStepResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ClampSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    }
                }
            }
        },
        "/workflow": {
            "post": {
                "description": "Create workflow for sequential execution",
                "consumes": [
                    "application/json"
                ],
                "summary": "Create workflow for execution",
                "parameters": [
                    {
                        "description": "Workflow Definition Payload",
                        "name": "workflowPayload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Workflow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Workflow"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ClampErrorResponse"
                        }
                    }
                }
            }
        },
        "/workflow/{workflowname}": {
            "get": {
                "description": "Fetch workflow details By Workflow Name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Fetch workflow details By Workflow Name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "workflow name",
                        "name": "workflowname",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Workflow"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Workflow"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Workflow"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Workflow"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AsyncStepResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "$ref": "#/definitions/models.ClampErrorResponse"
                },
                "requestHeaders": {
                    "type": "string"
                },
                "response": {
                    "type": "object",
                    "additionalProperties": true
                },
                "serviceRequestId": {
                    "type": "string"
                },
                "stepId": {
                    "type": "integer"
                },
                "stepStatusRecorded": {
                    "type": "boolean"
                }
            }
        },
        "models.ClampErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ClampSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Payload": {
            "type": "object",
            "properties": {
                "request": {
                    "type": "object",
                    "additionalProperties": true
                },
                "response": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.RequestTransform": {
            "type": "object"
        },
        "models.ServiceRequestResponse": {
            "type": "object",
            "properties": {
                "pollUrl": {
                    "type": "string"
                },
                "serviceRequestId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.ServiceRequestStatusResponse": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                },
                "service_request_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StepStatusResponse"
                    }
                },
                "total_time_in_ms": {
                    "type": "integer"
                },
                "workflow_name": {
                    "type": "string"
                }
            }
        },
        "models.Step": {
            "type": "object",
            "required": [
                "mode",
                "name",
                "val"
            ],
            "properties": {
                "canStepExecute": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "onFailure": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Step"
                    }
                },
                "requestTransform": {
                    "type": "object",
                    "$ref": "#/definitions/models.RequestTransform"
                },
                "transform": {
                    "type": "boolean"
                },
                "transformFormat": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "val": {
                    "type": "object",
                    "$ref": "#/definitions/models.Val"
                },
                "when": {
                    "type": "string"
                }
            }
        },
        "models.StepStatusResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "payload": {
                    "type": "object",
                    "$ref": "#/definitions/models.Payload"
                },
                "status": {
                    "type": "string"
                },
                "time_taken": {
                    "type": "integer"
                }
            }
        },
        "models.Val": {
            "type": "object"
        },
        "models.Workflow": {
            "type": "object",
            "required": [
                "name",
                "steps"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Step"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Clamp Swagger API",
	Description: "An opinionated approach to microservices architecture and orchestration",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
